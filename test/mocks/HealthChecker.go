// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/siutsin/heartbeats/api/v1alpha1"
)

// HealthChecker is an autogenerated mock type for the HealthChecker type
type HealthChecker struct {
	mock.Mock
}

type HealthChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthChecker) EXPECT() *HealthChecker_Expecter {
	return &HealthChecker_Expecter{mock: &_m.Mock}
}

// CheckEndpointHealth provides a mock function with given fields: ctx, endpoint, expectedStatusCodeRanges, endpointsSecret
func (_m *HealthChecker) CheckEndpointHealth(ctx context.Context, endpoint string, expectedStatusCodeRanges []v1alpha1.StatusCodeRange, endpointsSecret v1alpha1.EndpointsSecret) (bool, int, bool, error) {
	ret := _m.Called(ctx, endpoint, expectedStatusCodeRanges, endpointsSecret)

	if len(ret) == 0 {
		panic("no return value specified for CheckEndpointHealth")
	}

	var r0 bool
	var r1 int
	var r2 bool
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []v1alpha1.StatusCodeRange, v1alpha1.EndpointsSecret) (bool, int, bool, error)); ok {
		return rf(ctx, endpoint, expectedStatusCodeRanges, endpointsSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []v1alpha1.StatusCodeRange, v1alpha1.EndpointsSecret) bool); ok {
		r0 = rf(ctx, endpoint, expectedStatusCodeRanges, endpointsSecret)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []v1alpha1.StatusCodeRange, v1alpha1.EndpointsSecret) int); ok {
		r1 = rf(ctx, endpoint, expectedStatusCodeRanges, endpointsSecret)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []v1alpha1.StatusCodeRange, v1alpha1.EndpointsSecret) bool); ok {
		r2 = rf(ctx, endpoint, expectedStatusCodeRanges, endpointsSecret)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, []v1alpha1.StatusCodeRange, v1alpha1.EndpointsSecret) error); ok {
		r3 = rf(ctx, endpoint, expectedStatusCodeRanges, endpointsSecret)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// HealthChecker_CheckEndpointHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEndpointHealth'
type HealthChecker_CheckEndpointHealth_Call struct {
	*mock.Call
}

// CheckEndpointHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - expectedStatusCodeRanges []v1alpha1.StatusCodeRange
//   - endpointsSecret v1alpha1.EndpointsSecret
func (_e *HealthChecker_Expecter) CheckEndpointHealth(ctx interface{}, endpoint interface{}, expectedStatusCodeRanges interface{}, endpointsSecret interface{}) *HealthChecker_CheckEndpointHealth_Call {
	return &HealthChecker_CheckEndpointHealth_Call{Call: _e.mock.On("CheckEndpointHealth", ctx, endpoint, expectedStatusCodeRanges, endpointsSecret)}
}

func (_c *HealthChecker_CheckEndpointHealth_Call) Run(run func(ctx context.Context, endpoint string, expectedStatusCodeRanges []v1alpha1.StatusCodeRange, endpointsSecret v1alpha1.EndpointsSecret)) *HealthChecker_CheckEndpointHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]v1alpha1.StatusCodeRange), args[3].(v1alpha1.EndpointsSecret))
	})
	return _c
}

func (_c *HealthChecker_CheckEndpointHealth_Call) Return(_a0 bool, _a1 int, _a2 bool, _a3 error) *HealthChecker_CheckEndpointHealth_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *HealthChecker_CheckEndpointHealth_Call) RunAndReturn(run func(context.Context, string, []v1alpha1.StatusCodeRange, v1alpha1.EndpointsSecret) (bool, int, bool, error)) *HealthChecker_CheckEndpointHealth_Call {
	_c.Call.Return(run)
	return _c
}

// NewHealthChecker creates a new instance of HealthChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthChecker {
	mock := &HealthChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
